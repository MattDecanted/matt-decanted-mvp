import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useLanguage } from '../contexts/LanguageContext';
import { supabase, safeQuery } from '../lib/supabaseClient';
import { getUserBadges, ACHIEVEMENT_BADGES } from '../types/membership';
import { 
  Crown, Star, Trophy, Play, Calendar, Users, TrendingUp, Award,
  Clock, BookOpen, Video, CheckCircle, ArrowRight, Gift, Settings,
  Download, Eye, MessageSquare, Brain, Target, Zap, Flame, Shield
} from 'lucide-react';
import LoadingSpinner from '../components/Common/LoadingSpinner';
import ProgressBar from '../components/Common/ProgressBar';

interface LeaderboardMember {
  id: string;
  name: string;
  avatar: string;
  points: number;
  rank: number;
  tier: 'free' | 'basic' | 'premium';
  badges: string[];
}

interface UserStats {
  shortsWatched: number;
  modulesCompleted: number;
  badgesEarned: number;
  quizScore: number;
  streakDays: number;
  totalPoints: number;
  rank: number;
  swirdleStreak: number;
  swirdleGamesWon: number;
  blindTastingsCompleted: number;
  communityPosts: number;
}

interface BlindTastingVideo {
  id: string;
  title: string;
  description: string;
  thumbnailUrl: string;
  duration: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  isNew: boolean;
}

interface Masterclass {
  id: string;
  title: string;
  description: string;
  instructor: string;
  date: string;
  time: string;
  duration: string;
  maxParticipants: number;
  currentParticipants: number;
  tier: 'basic' | 'premium';
  isRegistered: boolean;
}

const MemberDashboard: React.FC = () => {
  const { user, profile } = useAuth();
  const { t } = useLanguage();
  const [loading, setLoading] = useState(true);
  const [leaderboard, setLeaderboard] = useState<LeaderboardMember[]>([]);
  const [userStats, setUserStats] = useState<UserStats | null>(null);
  const [blindTastingVideo, setBlindTastingVideo] = useState<BlindTastingVideo | null>(null);
  const [masterclasses, setMasterclasses] = useState<Masterclass[]>([]);

  useEffect(() => {
    if (user) {
      loadDashboardData();
    } else {
      setLoading(false);
    }
  }, [user]);

  const loadDashboardData = async () => {
    const mockLeaderboard: LeaderboardMember[] = [
      {
        id: '1',
        name: 'Sarah Chen',
        avatar: 'https://images.pexels.com/photos/774909/pexels-photo-774909.jpeg?auto=compress&cs=tinysrgb&w=150',
        points: 2847,
        rank: 1,
        tier: 'premium',
        badges: ['harvest_hand', 'vocabulary_master', 'community_leader']
      },
      {
        id: '2',
        name: 'James Rodriguez',
        avatar: 'https://images.pexels.com/photos/1222271/pexels-photo-1222271.jpeg?auto=compress&cs=tinysrgb&w=150',
        points: 2156,
        rank: 2,
        tier: 'basic',
        badges: ['berry_builder', 'swirdle_champion']
      },
      {
        id: '3',
        name: 'Emma Thompson',
        avatar: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=150',
        points: 1923,
        rank: 3,
        tier: 'basic',
        badges: ['bloom_boss', 'tasting_expert']
      }
    ];

    const mockUserStats: UserStats = {
      shortsWatched: 23,
      modulesCompleted: 8,
      badgesEarned: 5,
      quizScore: 87,
      streakDays: 12,
      totalPoints: 1456,
      rank: 15,
      swirdleStreak: 7,
      swirdleGamesWon: 34,
      blindTastingsCompleted: 6,
      communityPosts: 3,
    };

    const mockBlindTasting: BlindTastingVideo = {
      id: '1',
      title: 'Burgundy vs. Pinot Noir Challenge',
      description: 'Can you distinguish between Old World and New World Pinot Noir? Test your palate with Matt\'s latest blind tasting challenge.',
      thumbnailUrl: 'https://images.pexels.com/photos/1407846/pexels-photo-1407846.jpeg',
      duration: '25 min',
      difficulty: 'intermediate',
      isNew: true
    };

    const mockMasterclasses: Masterclass[] = [
      {
        id: '1',
        title: 'Burgundy Deep Dive: Terroir & Tradition',
        description: 'Explore the complex world of Burgundy wines with Matt, from village-level to Grand Cru classifications.',
        instructor: 'Matt Decanted',
        date: '2025-01-25',
        time: '19:00',
        duration: '90 min',
        maxParticipants: 50,
        currentParticipants: 34,
        tier: 'premium',
        isRegistered: false
      },
      {
        id: '2',
        title: 'Food Pairing Secrets with Matt',
        description: 'Learn Matt\'s professional techniques for creating perfect food and wine pairings.',
        instructor: 'Matt Decanted',
        date: '2025-01-28',
        time: '18:30',
        duration: '60 min',
        maxParticipants: 30,
        currentParticipants: 18,
        tier: 'basic',
        isRegistered: true
      }
    ];

    const leaderboardData = await safeQuery(
      () => supabase!.from('user_leaderboard').select('*').order('points', { ascending: false }).limit(10),
      mockLeaderboard
    );
    const userStatsData = await safeQuery(
      () => supabase!.from('user_stats').select('*').eq('user_id', user!.id).single(),
      mockUserStats
    );
    const blindTastingData = await safeQuery(
      () => supabase!.from('blind_tasting_videos').select('*').eq('is_featured', true).single(),
      mockBlindTasting
    );
    const masterclassData = await safeQuery(
      () => supabase!.from('masterclasses').select('*').gte('date', new Date().toISOString()).order('date'),
      mockMasterclasses
    );

    setLeaderboard(leaderboardData);
    setUserStats(userStatsData);
    setBlindTastingVideo(blindTastingData);
    setMasterclasses(masterclassData);
    setLoading(false);
  };

  const getAchievementBadges = () => {
    if (!userStats) return [];
    
    return getUserBadges(
      Math.floor(userStats.modulesCompleted / 5), // courses completed (estimate)
      userStats.modulesCompleted,
      userStats.modulesCompleted * 2, // quizzes completed (estimate)
      userStats.streakDays
    );
  };

  const getNextBadge = () => {
    const earnedBadges = getAchievementBadges();
    return ACHIEVEMENT_BADGES.find(badge => !earnedBadges.some(earned => earned.id === badge.id));
  };

  const getTierIcon = (tier: string) => {
    switch (tier) {
      case 'premium': return <Crown className="w-4 h-4 text-purple-600" />;
      case 'basic': return <Star className="w-4 h-4 text-amber-600" />;
      default: return <Users className="w-4 h-4 text-gray-600" />;
    }
  };

  const getTierColor = (tier: string) => {
    switch (tier) {
      case 'premium': return 'text-purple-600 bg-purple-100';
      case 'basic': return 'text-amber-600 bg-amber-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'advanced': return 'bg-red-100 text-red-800';
      case 'intermediate': return 'bg-amber-100 text-amber-800';
      default: return 'bg-green-100 text-green-800';
    }
  };

  const canAccessMasterclass = (masterclass: Masterclass): boolean => {
    if (!profile) return false;
    if (profile.role === 'admin') return true;
    if (masterclass.tier === 'basic') return ['basic', 'premium', 'subscriber', 'admin'].includes(profile.role);
    if (masterclass.tier === 'premium') return ['premium', 'admin'].includes(profile.role) || 
      (profile.role === 'subscriber' && profile.subscription_status === 'active');
    return false;
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (!user || !profile || !userStats) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Dashboard Unavailable</h1>
          <p className="text-gray-600 mb-6">Please try again later</p>
          <Link to="/" className="bg-blue-600 text-white px-6 py-3 rounded-lg">
            Return Home
          </Link>
        </div>
      </div>
    );
  }

  const earnedBadges = getAchievementBadges();
  const nextBadge = getNextBadge();

  return (
    <div className="min-h-screen py-8 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Welcome Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Welcome back, {profile?.full_name?.split(' ')[0] || user?.email?.split('@')[0] || 'Wine Enthusiast'}!
              </h1>
              <p className="text-gray-600 mt-1">
                {t('dashboard.continueJourney')}
              </p>
            </div>
            <div className="text-right">
              <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                profile?.role === 'admin' ? 'bg-purple-100 text-purple-800' :
                profile?.role === 'subscriber' ? 'bg-blue-100 text-blue-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {profile?.role === 'admin' && <Crown className="w-4 h-4 mr-1" />}
                {profile?.role === 'subscriber' && <Star className="w-4 h-4 mr-1" />}
                {(profile?.role || 'learner').toUpperCase()} {t('dashboard.member')}
              </div>
            </div>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-8">
          <div className="bg-white rounded-lg shadow-lg p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <BookOpen className="w-5 h-5 text-blue-600" />
              </div>
              <div className="ml-3">
                <p className="text-xs font-medium text-gray-600">Modules</p>
                <p className="text-lg font-bold text-gray-900">{userStats.modulesCompleted}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                <Brain className="w-5 h-5 text-purple-600" />
              </div>
              <div className="ml-3">
                <p className="text-xs font-medium text-gray-600">Swirdle</p>
                <p className="text-lg font-bold text-gray-900">{userStats.swirdleStreak}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center">
                <Target className="w-5 h-5 text-amber-600" />
              </div>
              <div className="ml-3">
                <p className="text-xs font-medium text-gray-600">Blind Tests</p>
                <p className="text-lg font-bold text-gray-900">{userStats.blindTastingsCompleted}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                <Award className="w-5 h-5 text-green-600" />
              </div>
              <div className="ml-3">
                <p className="text-xs font-medium text-gray-600">Badges</p>
                <p className="text-lg font-bold text-gray-900">{earnedBadges.length}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                <Flame className="w-5 h-5 text-red-600" />
              </div>
              <div className="ml-3">
                <p className="text-xs font-medium text-gray-600">Streak</p>
                <p className="text-lg font-bold text-gray-900">{userStats.streakDays}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-4">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-indigo-100 rounded-lg flex items-center justify-center">
                <TrendingUp className="w-5 h-5 text-indigo-600" />
              </div>
              <div className="ml-3">
                <p className="text-xs font-medium text-gray-600">Rank</p>
                <p className="text-lg font-bold text-gray-900">#{userStats.rank}</p>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Daily Swirdle */}
            <div className="bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg shadow-lg p-6 text-white">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center">
                  <Brain className="w-8 h-8 mr-3" />
                  <div>
                    <h2 className="text-xl font-bold">Today's Swirdle</h2>
                    <p className="text-purple-100">Daily wine word challenge</p>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold">{userStats.swirdleStreak}</div>
                  <div className="text-purple-100 text-sm">day streak</div>
                </div>
              </div>
              
              <div className="bg-white bg-opacity-20 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold mb-1">Challenge Your Vocabulary</h3>
                    <p className="text-purple-100 text-sm">Guess today's wine term in 6 tries</p>
                  </div>
                  <Link
                    to="/swirdle"
                    className="bg-white text-purple-600 px-4 py-2 rounded-lg font-medium hover:bg-purple-50 transition-colors flex items-center"
                  >
                    <Brain className="w-4 h-4 mr-2" />
                    Play Now
                  </Link>
                </div>
              </div>
            </div>

            {/* Featured Blind Tasting */}
            {blindTastingVideo && (
              <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                <div className="aspect-video bg-gray-200 relative">
                  <img
                    src={blindTastingVideo.thumbnailUrl}
                    alt={blindTastingVideo.title}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center">
                    <div className="text-center text-white">
                      <Play className="w-16 h-16 mx-auto mb-4 bg-white bg-opacity-20 rounded-full p-4" />
                      <h3 className="text-xl font-bold mb-2">{blindTastingVideo.title}</h3>
                      <p className="text-sm opacity-90">{blindTastingVideo.description}</p>
                    </div>
                  </div>
                  {blindTastingVideo.isNew && (
                    <div className="absolute top-4 left-4 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                      NEW
                    </div>
                  )}
                  <div className={`absolute top-4 right-4 px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(blindTastingVideo.difficulty)}`}>
                    {blindTastingVideo.difficulty}
                  </div>
                </div>
                <div className="p-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center text-sm text-gray-500">
                      <Clock className="w-4 h-4 mr-1" />
                      <span>{blindTastingVideo.duration}</span>
                    </div>
                    <Link
                      to="/content"
                      className="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                    >
                      Start Challenge
                    </Link>
                  </div>
                </div>
              </div>
            )}

            {/* Upcoming Masterclasses */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-900">{t('dashboard.upcomingMasterclasses')}</h2>
                <Link to="/courses" className="text-blue-600 hover:text-blue-800 font-medium text-sm">
                  View All →
                </Link>
              </div>

              <div className="space-y-4">
                {masterclasses.slice(0, 2).map((masterclass) => {
                  const hasAccess = canAccessMasterclass(masterclass);
                  
                  return (
                    <div key={masterclass.id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center mb-2">
                            <h3 className="font-semibold text-gray-900">{masterclass.title}</h3>
                            <span className={`ml-2 px-2 py-1 text-xs rounded-full ${
                              masterclass.tier === 'premium' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'
                            }`}>
                              {masterclass.tier}
                            </span>
                            {masterclass.isRegistered && (
                              <CheckCircle className="w-4 h-4 text-green-600 ml-2" />
                            )}
                          </div>
                          <p className="text-gray-600 text-sm mb-3">{masterclass.description}</p>
                          <div className="flex items-center text-sm text-gray-500">
                            <Calendar className="w-4 h-4 mr-1" />
                            <span>{new Date(masterclass.date).toLocaleDateString()} at {masterclass.time}</span>
                            <span className="mx-2">•</span>
                            <Clock className="w-4 h-4 mr-1" />
                            <span>{masterclass.duration}</span>
                            <span className="mx-2">•</span>
                            <Users className="w-4 h-4 mr-1" />
                            <span>{masterclass.currentParticipants}/{masterclass.maxParticipants}</span>
                          </div>
                        </div>
                        <div className="ml-4">
                          {hasAccess ? (
                            <button className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                              masterclass.isRegistered
                                ? 'bg-green-100 text-green-800'
                                : 'bg-blue-600 hover:bg-blue-700 text-white'
                            }`}>
                              {masterclass.isRegistered ? t('dashboard.registered') : t('dashboard.register')}
                            </button>
                          ) : (
                            <div className="text-center">
                              <div className="text-xs text-gray-500 mb-1">{t('dashboard.upgrade')}</div>
                              <Link
                                to="/pricing"
                                className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-xs font-medium transition-colors"
                              >
                                {t('dashboard.upgradeToAccess')}
                              </Link>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>

              {masterclasses.length === 0 && (
                <div className="text-center py-8">
                  <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    {t('dashboard.noUpcomingMasterclasses')}
                  </h3>
                  <p className="text-gray-600">
                    {t('dashboard.checkBackForEvents')}
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Achievement Badges */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <Award className="w-5 h-5 text-amber-600 mr-2" />
                Your Achievements
              </h2>
              
              <div className="grid grid-cols-2 gap-3 mb-4">
                {earnedBadges.slice(0, 4).map((badge) => (
                  <div key={badge.id} className="text-center p-3 bg-amber-50 border border-amber-200 rounded-lg">
                    <div className="text-2xl mb-1">{badge.icon}</div>
                    <div className="text-xs font-medium text-amber-800">{badge.name}</div>
                  </div>
                ))}
                
                {/* Next Badge Preview */}
                {nextBadge && (
                  <div className="text-center p-3 bg-gray-50 border border-gray-200 rounded-lg opacity-60">
                    <div className="text-2xl mb-1 grayscale">{nextBadge.icon}</div>
                    <div className="text-xs font-medium text-gray-600">{nextBadge.name}</div>
                  </div>
                )}
              </div>

              <div className="text-center">
                <p className="text-sm text-gray-600 mb-2">
                  {earnedBadges.length} of {ACHIEVEMENT_BADGES.length} badges earned
                </p>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-amber-600 h-2 rounded-full"
                    style={{ width: `${(earnedBadges.length / ACHIEVEMENT_BADGES.length) * 100}%` }}
                  />
                </div>
              </div>
            </div>

            {/* Leaderboard */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-bold text-gray-900 flex items-center">
                  <Trophy className="w-5 h-5 text-amber-600 mr-2" />
                  {t('dashboard.topMembers')}
                </h2>
                <Link to="/leaderboard" className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                  {t('dashboard.viewFullLeaderboard')} →
                </Link>
              </div>
              
              <div className="space-y-3">
                {leaderboard.slice(0, 5).map((member, index) => (
                  <div key={member.id} className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                        index === 0 ? 'bg-amber-100 text-amber-800' :
                        index === 1 ? 'bg-gray-100 text-gray-800' :
                        index === 2 ? 'bg-orange-100 text-orange-800' :
                        'bg-blue-100 text-blue-800'
                      }`}>
                        {index + 1}
                      </div>
                      <img
                        src={member.avatar}
                        alt={member.name}
                        className="w-8 h-8 rounded-full ml-3 mr-2"
                      />
                      <div>
                        <div className="flex items-center">
                          <span className="font-medium text-gray-900 text-sm">{member.name}</span>
                          {getTierIcon(member.tier)}
                        </div>
                        <div className="text-xs text-gray-500">{member.points} points</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-bold text-amber-600">#{member.rank}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">{t('dashboard.quickActions')}</h3>
              <div className="grid grid-cols-1 gap-3">
                <Link
                  to="/swirdle"
                  className="flex items-center justify-between p-3 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors"
                >
                  <div className="flex items-center">
                    <Brain className="w-5 h-5 text-purple-600 mr-3" />
                    <span className="font-medium text-purple-900">Play Swirdle</span>
                  </div>
                  <ArrowRight className="w-4 h-4 text-purple-600" />
                </Link>

                <Link
                  to="/content"
                  className="flex items-center justify-between p-3 bg-amber-50 hover:bg-amber-100 rounded-lg transition-colors"
                >
                  <div className="flex items-center">
                    <Target className="w-5 h-5 text-amber-600 mr-3" />
                    <span className="font-medium text-amber-900">Blind Tasting</span>
                  </div>
                  <ArrowRight className="w-4 h-4 text-amber-600" />
                </Link>

                <Link
                  to="/courses"
                  className="flex items-center justify-between p-3 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors"
                >
                  <div className="flex items-center">
                    <BookOpen className="w-5 h-5 text-blue-600 mr-3" />
                    <span className="font-medium text-blue-900">Wine Courses</span>
                  </div>
                  <ArrowRight className="w-4 h-4 text-blue-600" />
                </Link>

                <Link
                  to="/community"
                  className="flex items-center justify-between p-3 bg-green-50 hover:bg-green-100 rounded-lg transition-colors"
                >
                  <div className="flex items-center">
                    <Users className="w-5 h-5 text-green-600 mr-3" />
                    <span className="font-medium text-green-900">Join Discussion</span>
                  </div>
                  <ArrowRight className="w-4 h-4 text-green-600" />
                </Link>
              </div>
            </div>

            {/* Learning Progress */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Learning Progress</h3>
              
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-600">Course Completion</span>
                    <span className="font-medium">{Math.round((userStats.modulesCompleted / 20) * 100)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full"
                      style={{ width: `${Math.min(100, (userStats.modulesCompleted / 20) * 100)}%` }}
                    />
                  </div>
                </div>

                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-600">Vocabulary Mastery</span>
                    <span className="font-medium">{Math.round((userStats.swirdleGamesWon / 100) * 100)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-purple-600 h-2 rounded-full"
                      style={{ width: `${Math.min(100, (userStats.swirdleGamesWon / 100) * 100)}%` }}
                    />
                  </div>
                </div>

                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-600">Tasting Skills</span>
                    <span className="font-medium">{Math.round((userStats.blindTastingsCompleted / 10) * 100)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-amber-600 h-2 rounded-full"
                      style={{ width: `${Math.min(100, (userStats.blindTastingsCompleted / 10) * 100)}%` }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MemberDashboard;
